GINKGO       ?= "github.com/onsi/ginkgo/v2/ginkgo"
GINKGO_ARGS  ?=-v --fail-fast -r --timeout=3h

.PHONY: prepare-test
prepare-test:
ifeq ("$(DISK)","")
	@echo "No disk image found, run 'make build-disk' first"
	@exit 1
endif
	@scripts/run_vm.sh start $(DISK)
	@echo "VM started from $(DISK)"
	go run $(GINKGO) run $(GINKGO_ARGS) ./tests/wait-active

.PHONY: prepare-installer-test
prepare-installer-test:
ifeq ("$(ISO)","")
	@echo "No ISO image found, run 'make build-iso' first"
	@exit 1
endif
	@scripts/run_vm.sh start $(ISO)
	@echo "VM started from $(ISO)"

.PHONY: test-clean
test-clean:
	@scripts/run_vm.sh stop
	@scripts/run_vm.sh clean

.PHONY: test-smoke
test-smoke: prepare-test
	go run $(GINKGO) run $(GINKGO_ARGS) ./tests/smoke

.PHONY: test-grubfallback
test-grubfallback: prepare-test
	go run $(GINKGO) run $(GINKGO_ARGS) ./tests/grubfallback

.PHONY: test-recovery
test-recovery: prepare-test
	go run $(GINKGO) run $(GINKGO_ARGS) ./tests/recovery

.PHONY: test-fallback
test-fallback: prepare-test
	go run $(GINKGO) run $(GINKGO_ARGS) ./tests/fallback

.PHONY: test-fsck
test-fsck: prepare-test
	go run $(GINKGO) run $(GINKGO_ARGS) ./tests/fsck

.PHONY: test-upgrade
test-upgrade: prepare-test
	go run $(GINKGO) run $(GINKGO_ARGS) ./tests/upgrade

.PHONY: test-deps
test-deps:
	go mod download
	go install github.com/onsi/gomega/...
	go install github.com/onsi/ginkgo/v2/ginkgo

.PHONY: test-cli
test-cli:
	go run $(GINKGO) run --label-filter '!root' --fail-fast --race --covermode=atomic --coverprofile=coverage.txt --coverpkg=github.com/rancher/elemental-toolkit/... -p -r ${PKG}

.PHONY: test-root
test-root:
ifneq ($(shell id -u), 0)
	@echo "This tests require root/sudo to run."
	@exit 1
else
	go run $(GINKGO) run --label-filter root --fail-fast --race --covermode=atomic --coverprofile=coverage_root.txt --coverpkg=github.com/rancher/elemental-toolkit/... -procs=1 -r ${PKG}
endif


